// #include <Gamebuino-Meta.h>
// #include "player.hpp"
// #include "graphics.hpp"

// void setup()
// {
//     gb.begin();
//     gb.setFrameRate(40);
// }

// Image avatar(SPRITE_DATA);

// void loop()
// {
//     while (!gb.update())
//     {
//     }
//     gb.display.clear();
//     // xd();
//     gb.display.drawImage(
//         10,     // x
//         10,     // y
//         avatar, // image
//         16,     // x-stretched
//         16      // y-stretched
//     );
// }

// const Color PALETTE[] = {

//     (Color)0x0000, // 0x0
//     (Color)0x18c3, // 0x1
//     (Color)0x3186, // 0x2
//     (Color)0x4228, // 0x3
//     (Color)0x632c, // 0x4
//     (Color)0xad55, // 0x5
//     (Color)0xee2f, // 0x6
//     (Color)0xff36, // 0x7
//     (Color)0x0862, // 0x8
//     (Color)0x10e4, // 0x9
//     (Color)0x1926, // 0xa
//     (Color)0x6217, // 0xb
//     (Color)0x7afa, // 0xc
//     (Color)0xb4df, // 0xd
//     (Color)0xf81f, // 0xe
//     (Color)0x0000  // 0xf

// };
#include <Gamebuino-Meta.h>
#include "debug_framework.hpp"

const Color PALETTE[] = {

    (Color)0xffff, // 0x0
    (Color)0xacd0, // 0x1
    (Color)0x72c7, // 0x2
    (Color)0x0000, // 0x3
    (Color)0x8a39, // 0x4
    (Color)0xf81f, // 0x5
    (Color)0xd8e4, // 0x6
    (Color)0xfd42, // 0x7
    (Color)0xcc68, // 0x8
    (Color)0xfeb2, // 0x9
    (Color)0xf720, // 0xa
    (Color)0x8668, // 0xb
    (Color)0x044a, // 0xc
    (Color)0x0210, // 0xd
    (Color)0x4439, // 0xe
    (Color)0x7ddf, // 0xf
    (Color)0xf81f  // 0x10

};

const uint8_t IMAGE_DATA[] = {

    // metadata

    16,   // frame width
    16,   // frame height
    0x04, // frames (lower byte)
    0x00, // frames (upper byte)
    4,    // frame loop
    0x5,  // transparent color
    1,    // indexed color mode

    // colormap

    // frame 1/4
    0x55, 0x55, 0x53, 0x33, 0x33, 0x55, 0x55, 0x55,
    0x55, 0x53, 0x3c, 0xcc, 0xcc, 0x33, 0x55, 0x55,
    0x55, 0x3c, 0xcc, 0xcc, 0xcc, 0xcc, 0x35, 0x55,
    0x55, 0x3c, 0xcc, 0xcc, 0xcc, 0xcc, 0x35, 0x55,
    0x55, 0x3c, 0xcc, 0xcc, 0xcc, 0xcc, 0x35, 0x55,
    0x55, 0x3c, 0x99, 0x99, 0x9c, 0xcc, 0x35, 0x55,
    0x55, 0x53, 0x99, 0x99, 0x9c, 0xc3, 0x35, 0x55,
    0x55, 0x53, 0x93, 0x99, 0x9c, 0x39, 0x35, 0x55,
    0x55, 0x53, 0x93, 0x99, 0x99, 0x93, 0x55, 0x55,
    0x55, 0x55, 0x39, 0x99, 0x93, 0x35, 0x55, 0x55,
    0x55, 0x55, 0x53, 0x33, 0x3b, 0x35, 0x55, 0x55,
    0x55, 0x55, 0x53, 0x3b, 0xbb, 0x35, 0x55, 0x55,
    0x55, 0x55, 0x53, 0xb3, 0xbb, 0x35, 0x55, 0x55,
    0x55, 0x55, 0x53, 0xb3, 0x93, 0x35, 0x55, 0x55,
    0x55, 0x55, 0x53, 0x33, 0x93, 0x55, 0x55, 0x55,
    0x55, 0x55, 0x53, 0x99, 0x33, 0x55, 0x55, 0x55,

    // frame 2/4
    0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
    0x55, 0x55, 0x53, 0x33, 0x33, 0x55, 0x55, 0x55,
    0x55, 0x53, 0x3c, 0xcc, 0xcc, 0x33, 0x55, 0x55,
    0x55, 0x3c, 0xcc, 0xcc, 0xcc, 0xcc, 0x35, 0x55,
    0x55, 0x3c, 0xcc, 0xcc, 0xcc, 0xcc, 0x35, 0x55,
    0x55, 0x3c, 0xcc, 0xcc, 0xcc, 0xcc, 0x35, 0x55,
    0x55, 0x3c, 0x99, 0x99, 0x9c, 0xcc, 0x35, 0x55,
    0x55, 0x53, 0x99, 0x99, 0x9c, 0xc3, 0x35, 0x55,
    0x55, 0x53, 0x93, 0x99, 0x9c, 0x39, 0x35, 0x55,
    0x55, 0x53, 0x93, 0x99, 0x99, 0x93, 0x55, 0x55,
    0x55, 0x55, 0x39, 0x99, 0x93, 0x35, 0x55, 0x55,
    0x55, 0x55, 0x33, 0x33, 0x3b, 0x33, 0x55, 0x55,
    0x55, 0x53, 0x99, 0xbb, 0xbb, 0x39, 0x35, 0x55,
    0x55, 0x55, 0x33, 0x3b, 0xbb, 0xb3, 0x55, 0x55,
    0x55, 0x55, 0x53, 0x33, 0x33, 0x33, 0x55, 0x55,
    0x55, 0x55, 0x39, 0x93, 0x39, 0x93, 0x55, 0x55,

    // frame 3/4
    0x55, 0x55, 0x53, 0x33, 0x33, 0x55, 0x55, 0x55,
    0x55, 0x53, 0x3c, 0xcc, 0xcc, 0x33, 0x55, 0x55,
    0x55, 0x3c, 0xcc, 0xcc, 0xcc, 0xcc, 0x35, 0x55,
    0x55, 0x3c, 0xcc, 0xcc, 0xcc, 0xcc, 0x35, 0x55,
    0x55, 0x3c, 0xcc, 0xcc, 0xcc, 0xcc, 0x35, 0x55,
    0x55, 0x3c, 0x99, 0x99, 0x9c, 0xcc, 0x35, 0x55,
    0x55, 0x53, 0x99, 0x99, 0x9c, 0xc3, 0x35, 0x55,
    0x55, 0x53, 0x93, 0x99, 0x9c, 0x39, 0x35, 0x55,
    0x55, 0x53, 0x93, 0x99, 0x99, 0x93, 0x55, 0x55,
    0x55, 0x55, 0x39, 0x99, 0x93, 0x35, 0x55, 0x55,
    0x55, 0x55, 0x53, 0x33, 0x3b, 0x35, 0x55, 0x55,
    0x55, 0x55, 0x53, 0x3b, 0xbb, 0x35, 0x55, 0x55,
    0x55, 0x55, 0x53, 0xb3, 0xbb, 0x35, 0x55, 0x55,
    0x55, 0x55, 0x53, 0xb3, 0x93, 0x35, 0x55, 0x55,
    0x55, 0x55, 0x53, 0x33, 0x93, 0x55, 0x55, 0x55,
    0x55, 0x55, 0x53, 0x99, 0x33, 0x55, 0x55, 0x55,

    // frame 4/4
    0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
    0x55, 0x55, 0x53, 0x33, 0x33, 0x55, 0x55, 0x55,
    0x55, 0x53, 0x3c, 0xcc, 0xcc, 0x33, 0x55, 0x55,
    0x55, 0x3c, 0xcc, 0xcc, 0xcc, 0xcc, 0x35, 0x55,
    0x55, 0x3c, 0xcc, 0xcc, 0xcc, 0xcc, 0x35, 0x55,
    0x55, 0x3c, 0xcc, 0xcc, 0xcc, 0xcc, 0x35, 0x55,
    0x55, 0x3c, 0x99, 0x99, 0x9c, 0xcc, 0x35, 0x55,
    0x55, 0x53, 0x99, 0x99, 0x9c, 0xc3, 0x35, 0x55,
    0x55, 0x53, 0x93, 0x99, 0x9c, 0x39, 0x35, 0x55,
    0x55, 0x53, 0x93, 0x99, 0x99, 0x93, 0x55, 0x55,
    0x55, 0x55, 0x39, 0x99, 0x93, 0x33, 0x55, 0x55,
    0x55, 0x55, 0x33, 0x33, 0x3b, 0xbb, 0x35, 0x55,
    0x55, 0x53, 0x93, 0x3b, 0xb3, 0xb9, 0x35, 0x55,
    0x55, 0x55, 0x33, 0xbb, 0xbb, 0x39, 0x35, 0x55,
    0x55, 0x55, 0x53, 0x33, 0x33, 0x33, 0x55, 0x55,
    0x55, 0x55, 0x39, 0x93, 0x39, 0x93, 0x55, 0x55

};

const uint8_t IMAGE_DATA2[] = {

    // metadata

    16,   // frame width
    16,   // frame height
    0x04, // frames (lower byte)
    0x00, // frames (upper byte)
    0,    // frame loop
    0x5,  // transparent color
    1,    // indexed color mode

    // colormap

    // frame 1/4
    0x55, 0x55, 0x53, 0x33, 0x33, 0x55, 0x55, 0x55,
    0x55, 0x53, 0x3c, 0xcc, 0xcc, 0x33, 0x55, 0x55,
    0x55, 0x3c, 0xcc, 0xcc, 0xcc, 0xcc, 0x35, 0x55,
    0x55, 0x3c, 0xcc, 0xcc, 0xcc, 0xcc, 0x35, 0x55,
    0x55, 0x3c, 0xcc, 0xcc, 0xcc, 0xcc, 0x35, 0x55,
    0x55, 0x3c, 0x99, 0x99, 0x9c, 0xcc, 0x35, 0x55,
    0x55, 0x53, 0x99, 0x99, 0x9c, 0xc3, 0x35, 0x55,
    0x55, 0x53, 0x93, 0x99, 0x9c, 0x39, 0x35, 0x55,
    0x55, 0x53, 0x93, 0x99, 0x99, 0x93, 0x55, 0x55,
    0x55, 0x55, 0x39, 0x99, 0x93, 0x35, 0x55, 0x55,
    0x55, 0x55, 0x53, 0x33, 0x3b, 0x35, 0x55, 0x55,
    0x55, 0x55, 0x53, 0x3b, 0xbb, 0x35, 0x55, 0x55,
    0x55, 0x55, 0x53, 0xb3, 0xbb, 0x35, 0x55, 0x55,
    0x55, 0x55, 0x53, 0xb3, 0x93, 0x35, 0x55, 0x55,
    0x55, 0x55, 0x53, 0x33, 0x93, 0x55, 0x55, 0x55,
    0x55, 0x55, 0x53, 0x99, 0x33, 0x55, 0x55, 0x55,

    // frame 2/4
    0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
    0x55, 0x55, 0x53, 0x33, 0x33, 0x55, 0x55, 0x55,
    0x55, 0x53, 0x3c, 0xcc, 0xcc, 0x33, 0x55, 0x55,
    0x55, 0x3c, 0xcc, 0xcc, 0xcc, 0xcc, 0x35, 0x55,
    0x55, 0x3c, 0xcc, 0xcc, 0xcc, 0xcc, 0x35, 0x55,
    0x55, 0x3c, 0xcc, 0xcc, 0xcc, 0xcc, 0x35, 0x55,
    0x55, 0x3c, 0x99, 0x99, 0x9c, 0xcc, 0x35, 0x55,
    0x55, 0x53, 0x99, 0x99, 0x9c, 0xc3, 0x35, 0x55,
    0x55, 0x53, 0x93, 0x99, 0x9c, 0x39, 0x35, 0x55,
    0x55, 0x53, 0x93, 0x99, 0x99, 0x93, 0x55, 0x55,
    0x55, 0x55, 0x39, 0x99, 0x93, 0x35, 0x55, 0x55,
    0x55, 0x55, 0x33, 0x33, 0x3b, 0x33, 0x55, 0x55,
    0x55, 0x53, 0x99, 0xbb, 0xbb, 0x39, 0x35, 0x55,
    0x55, 0x55, 0x33, 0x3b, 0xbb, 0xb3, 0x55, 0x55,
    0x55, 0x55, 0x53, 0x33, 0x33, 0x33, 0x55, 0x55,
    0x55, 0x55, 0x39, 0x93, 0x39, 0x93, 0x55, 0x55,

    // frame 3/4
    0x55, 0x55, 0x53, 0x33, 0x33, 0x55, 0x55, 0x55,
    0x55, 0x53, 0x3c, 0xcc, 0xcc, 0x33, 0x55, 0x55,
    0x55, 0x3c, 0xcc, 0xcc, 0xcc, 0xcc, 0x35, 0x55,
    0x55, 0x3c, 0xcc, 0xcc, 0xcc, 0xcc, 0x35, 0x55,
    0x55, 0x3c, 0xcc, 0xcc, 0xcc, 0xcc, 0x35, 0x55,
    0x55, 0x3c, 0x99, 0x99, 0x9c, 0xcc, 0x35, 0x55,
    0x55, 0x53, 0x99, 0x99, 0x9c, 0xc3, 0x35, 0x55,
    0x55, 0x53, 0x93, 0x99, 0x9c, 0x39, 0x35, 0x55,
    0x55, 0x53, 0x93, 0x99, 0x99, 0x93, 0x55, 0x55,
    0x55, 0x55, 0x39, 0x99, 0x93, 0x35, 0x55, 0x55,
    0x55, 0x55, 0x53, 0x33, 0x3b, 0x35, 0x55, 0x55,
    0x55, 0x55, 0x53, 0x3b, 0xbb, 0x35, 0x55, 0x55,
    0x55, 0x55, 0x53, 0xb3, 0xbb, 0x35, 0x55, 0x55,
    0x55, 0x55, 0x53, 0xb3, 0x93, 0x35, 0x55, 0x55,
    0x55, 0x55, 0x53, 0x33, 0x93, 0x55, 0x55, 0x55,
    0x55, 0x55, 0x53, 0x99, 0x33, 0x55, 0x55, 0x55,

    // frame 4/4
    0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
    0x55, 0x55, 0x53, 0x33, 0x33, 0x55, 0x55, 0x55,
    0x55, 0x53, 0x3c, 0xcc, 0xcc, 0x33, 0x55, 0x55,
    0x55, 0x3c, 0xcc, 0xcc, 0xcc, 0xcc, 0x35, 0x55,
    0x55, 0x3c, 0xcc, 0xcc, 0xcc, 0xcc, 0x35, 0x55,
    0x55, 0x3c, 0xcc, 0xcc, 0xcc, 0xcc, 0x35, 0x55,
    0x55, 0x3c, 0x99, 0x99, 0x9c, 0xcc, 0x35, 0x55,
    0x55, 0x53, 0x99, 0x99, 0x9c, 0xc3, 0x35, 0x55,
    0x55, 0x53, 0x93, 0x99, 0x9c, 0x39, 0x35, 0x55,
    0x55, 0x53, 0x93, 0x99, 0x99, 0x93, 0x55, 0x55,
    0x55, 0x55, 0x39, 0x99, 0x93, 0x33, 0x55, 0x55,
    0x55, 0x55, 0x33, 0x33, 0x3b, 0xbb, 0x35, 0x55,
    0x55, 0x53, 0x93, 0x3b, 0xb3, 0xb9, 0x35, 0x55,
    0x55, 0x55, 0x33, 0xbb, 0xbb, 0x39, 0x35, 0x55,
    0x55, 0x55, 0x53, 0x33, 0x33, 0x33, 0x55, 0x55,
    0x55, 0x55, 0x39, 0x93, 0x39, 0x93, 0x55, 0x55

};

const uint8_t SCREEN_WIDTH = 80;
const uint8_t SCREEN_HEIGHT = 64;

const uint8_t AVATAR_WIDTH = IMAGE_DATA[0];
const uint8_t AVATAR_HEIGHT = IMAGE_DATA[1];

Image avatar(IMAGE_DATA);
Image avatar2(IMAGE_DATA2);

void setup()
{
    gb.begin();
    gb.setFrameRate(60);
    gb.display.setPalette(PALETTE);
}

int counter = 0;

void loop()
{
    // PODSUMOWANIE
    // rzeba wgrac do transcodera i wyeksportowac jako [o] INDEXED
    // bardzo wazne jest wgranie palety do transkodera, zeby poprawnie wczytalo transparent color
    // tak samo potem w kodzie zmieni sie paleta jesli nie wgra sie defaultowej prawdilowej
    // wazne jest zamienienie w tej palecie 16 kolorow jednego koloru na transparent #FF00FF, bo inaczej
    // nie wczyta nam przezroczystosci

    while (!gb.update())
        ;
    clear(Color::black);
    // gb.display.setColor(GREEN);
    gb.display.fillRect(0, 0, 160, 128);

    gb.display.drawImage(11, 11, avatar);
    gb.display.drawImage(41, 41, avatar2);
    counter++;
    gb.display.setColor(RED);
    debugFramework(counter, 10, 100);
}