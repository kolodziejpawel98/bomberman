// #include <Gamebuino-Meta.h>
// #include "player.hpp"
// #include "graphics.hpp"

// void setup()
// {
//     gb.begin();
//     gb.setFrameRate(40);
// }

// Image avatar(SPRITE_DATA);

// void loop()
// {
//     while (!gb.update())
//     {
//     }
//     gb.display.clear();
//     // xd();
//     gb.display.drawImage(
//         10,     // x
//         10,     // y
//         avatar, // image
//         16,     // x-stretched
//         16      // y-stretched
//     );
// }

// const Color PALETTE[] = {

//     (Color)0x0000, // 0x0
//     (Color)0x18c3, // 0x1
//     (Color)0x3186, // 0x2
//     (Color)0x4228, // 0x3
//     (Color)0x632c, // 0x4
//     (Color)0xad55, // 0x5
//     (Color)0xee2f, // 0x6
//     (Color)0xff36, // 0x7
//     (Color)0x0862, // 0x8
//     (Color)0x10e4, // 0x9
//     (Color)0x1926, // 0xa
//     (Color)0x6217, // 0xb
//     (Color)0x7afa, // 0xc
//     (Color)0xb4df, // 0xd
//     (Color)0xf81f, // 0xe
//     (Color)0x0000  // 0xf

// };
#include <Gamebuino-Meta.h>

const Color PALETTE[] = {

    (Color)0x0000, // 0x0
    (Color)0x8668, // 0x1
    (Color)0xfeb2, // 0x2
    (Color)0xf81f, // 0x3
    (Color)0x044a, // 0x4
    (Color)0x0000, // 0x5
    (Color)0x0000, // 0x6
    (Color)0x0000, // 0x7
    (Color)0x0000, // 0x8
    (Color)0x0000, // 0x9
    (Color)0x0000, // 0xa
    (Color)0x0000, // 0xb
    (Color)0x0000, // 0xc
    (Color)0x0000, // 0xd
    (Color)0x0000, // 0xe
    (Color)0x0000  // 0xf

};

const uint8_t IMAGE_DATA[] = {

    // metadata

    16,   // frame width
    16,   // frame height
    0x04, // frames (lower byte)
    0x00, // frames (upper byte)
    4,    // frame loop
    0x3,  // transparent color
    1,    // indexed color mode

    // colormap

    // frame 1/4
    0x33, 0x33, 0x30, 0x00, 0x00, 0x33, 0x33, 0x33,
    0x33, 0x30, 0x04, 0x44, 0x44, 0x00, 0x33, 0x33,
    0x33, 0x04, 0x44, 0x44, 0x44, 0x44, 0x03, 0x33,
    0x33, 0x04, 0x44, 0x44, 0x44, 0x44, 0x03, 0x33,
    0x33, 0x04, 0x44, 0x44, 0x44, 0x44, 0x03, 0x33,
    0x33, 0x04, 0x22, 0x22, 0x24, 0x44, 0x03, 0x33,
    0x33, 0x30, 0x22, 0x22, 0x24, 0x40, 0x03, 0x33,
    0x33, 0x30, 0x20, 0x22, 0x24, 0x02, 0x03, 0x33,
    0x33, 0x30, 0x20, 0x22, 0x22, 0x20, 0x33, 0x33,
    0x33, 0x33, 0x02, 0x22, 0x20, 0x03, 0x33, 0x33,
    0x33, 0x33, 0x30, 0x00, 0x01, 0x03, 0x33, 0x33,
    0x33, 0x33, 0x30, 0x01, 0x11, 0x03, 0x33, 0x33,
    0x33, 0x33, 0x30, 0x10, 0x11, 0x03, 0x33, 0x33,
    0x33, 0x33, 0x30, 0x10, 0x20, 0x03, 0x33, 0x33,
    0x33, 0x33, 0x30, 0x00, 0x20, 0x33, 0x33, 0x33,
    0x33, 0x33, 0x30, 0x22, 0x00, 0x33, 0x33, 0x33,

    // frame 2/4
    0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x33, 0x30, 0x00, 0x00, 0x33, 0x33, 0x33,
    0x33, 0x30, 0x04, 0x44, 0x44, 0x00, 0x33, 0x33,
    0x33, 0x04, 0x44, 0x44, 0x44, 0x44, 0x03, 0x33,
    0x33, 0x04, 0x44, 0x44, 0x44, 0x44, 0x03, 0x33,
    0x33, 0x04, 0x44, 0x44, 0x44, 0x44, 0x03, 0x33,
    0x33, 0x04, 0x22, 0x22, 0x24, 0x44, 0x03, 0x33,
    0x33, 0x30, 0x22, 0x22, 0x24, 0x40, 0x03, 0x33,
    0x33, 0x30, 0x20, 0x22, 0x24, 0x02, 0x03, 0x33,
    0x33, 0x30, 0x20, 0x22, 0x22, 0x20, 0x33, 0x33,
    0x33, 0x33, 0x02, 0x22, 0x20, 0x03, 0x33, 0x33,
    0x33, 0x33, 0x00, 0x00, 0x01, 0x00, 0x33, 0x33,
    0x33, 0x30, 0x22, 0x11, 0x11, 0x02, 0x03, 0x33,
    0x33, 0x33, 0x00, 0x01, 0x11, 0x10, 0x33, 0x33,
    0x33, 0x33, 0x30, 0x00, 0x00, 0x00, 0x33, 0x33,
    0x33, 0x33, 0x02, 0x20, 0x02, 0x20, 0x33, 0x33,

    // frame 3/4
    0x33, 0x33, 0x30, 0x00, 0x00, 0x33, 0x33, 0x33,
    0x33, 0x30, 0x04, 0x44, 0x44, 0x00, 0x33, 0x33,
    0x33, 0x04, 0x44, 0x44, 0x44, 0x44, 0x03, 0x33,
    0x33, 0x04, 0x44, 0x44, 0x44, 0x44, 0x03, 0x33,
    0x33, 0x04, 0x44, 0x44, 0x44, 0x44, 0x03, 0x33,
    0x33, 0x04, 0x22, 0x22, 0x24, 0x44, 0x03, 0x33,
    0x33, 0x30, 0x22, 0x22, 0x24, 0x40, 0x03, 0x33,
    0x33, 0x30, 0x20, 0x22, 0x24, 0x02, 0x03, 0x33,
    0x33, 0x30, 0x20, 0x22, 0x22, 0x20, 0x33, 0x33,
    0x33, 0x33, 0x02, 0x22, 0x20, 0x03, 0x33, 0x33,
    0x33, 0x33, 0x30, 0x00, 0x01, 0x03, 0x33, 0x33,
    0x33, 0x33, 0x30, 0x01, 0x11, 0x03, 0x33, 0x33,
    0x33, 0x33, 0x30, 0x10, 0x11, 0x03, 0x33, 0x33,
    0x33, 0x33, 0x30, 0x10, 0x20, 0x03, 0x33, 0x33,
    0x33, 0x33, 0x30, 0x00, 0x20, 0x33, 0x33, 0x33,
    0x33, 0x33, 0x30, 0x22, 0x00, 0x33, 0x33, 0x33,

    // frame 4/4
    0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x33, 0x30, 0x00, 0x00, 0x33, 0x33, 0x33,
    0x33, 0x30, 0x04, 0x44, 0x44, 0x00, 0x33, 0x33,
    0x33, 0x04, 0x44, 0x44, 0x44, 0x44, 0x03, 0x33,
    0x33, 0x04, 0x44, 0x44, 0x44, 0x44, 0x03, 0x33,
    0x33, 0x04, 0x44, 0x44, 0x44, 0x44, 0x03, 0x33,
    0x33, 0x04, 0x22, 0x22, 0x24, 0x44, 0x03, 0x33,
    0x33, 0x30, 0x22, 0x22, 0x24, 0x40, 0x03, 0x33,
    0x33, 0x30, 0x20, 0x22, 0x24, 0x02, 0x03, 0x33,
    0x33, 0x30, 0x20, 0x22, 0x22, 0x20, 0x33, 0x33,
    0x33, 0x33, 0x02, 0x22, 0x20, 0x00, 0x33, 0x33,
    0x33, 0x33, 0x00, 0x00, 0x01, 0x11, 0x03, 0x33,
    0x33, 0x30, 0x20, 0x01, 0x10, 0x12, 0x03, 0x33,
    0x33, 0x33, 0x00, 0x11, 0x11, 0x02, 0x03, 0x33,
    0x33, 0x33, 0x30, 0x00, 0x00, 0x00, 0x33, 0x33,
    0x33, 0x33, 0x02, 0x20, 0x02, 0x20, 0x33, 0x33

};
const uint8_t SCREEN_WIDTH = 80;
const uint8_t SCREEN_HEIGHT = 64;

const uint8_t AVATAR_WIDTH = IMAGE_DATA[0];
const uint8_t AVATAR_HEIGHT = IMAGE_DATA[1];

Image avatar(IMAGE_DATA);

void setup()
{
    gb.begin();
    gb.setFrameRate(40);
    gb.display.setPalette(PALETTE);
}

void loop()
{
    // PODSUMOWANIE
    // rzeba wgrac do transcodera i wyeksportowac jako [o] INDEXED
    // bardzo wazne jest wgranie palety do transkodera, zeby poprawnie wczytalo transparent color
    // tak samo potem w kodzie zmieni sie paleta jesli nie wgra sie defaultowej prawdilowej

    while (!gb.update())
    {
    }
    gb.display.clear();

    gb.display.drawImage(
        81, // x
        81, // y
        avatar);
    // gb.display.setColor(LIGHTGREEN);
    // gb.display.fillRect(0, 0, 80, 64);
}